#include <stdio.h>

// A utility function that returns
// maximum of two integers
int max(int a, int b) { return (a > b) ? a : b; }

// Returns the maximum value that can be
// put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n)
{
    // Base Case
    if (n == 0 || W == 0)
        return 0;

    // If weight of the nth item is more than
    // Knapsack capacity W, then this item cannot
    // be included in the optimal solution
    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);

    // Return the maximum of two cases:
    // (1) nth item included
    // (2) not included
    else
        return max(
            val[n - 1]
                + knapSack(W - wt[n - 1],
                           wt, val, n - 1),
            knapSack(W, wt, val, n - 1));
}

// Driver program to test above function
int main()
{
    int valsize,i,wtsize,wtkey;
    printf("enter the size of value and weight arrays\n ");
    scanf("%d%d",&valsize,&wtsize);
    int val[valsize];
    int wt[wtsize];
    printf("enter the values array\n");
    for(i=0;i<valsize;i++)
    {
        scanf("%d",&val[i]);
    }
    printf("enter the weight array\n");
    for(i=0;i<wtsize;i++)
    {
        scanf("%d",&wt[i]);
    }
    printf("enter the weight key\n");
    scanf("%d",&wtkey);

    printf("%d", knapSack(wtkey, wt, val, valsize));
    return 0;
}
